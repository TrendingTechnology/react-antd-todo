{"version":3,"sources":["serviceWorker.js","constants/todo.constants.js","reducers/todo.reducer.js","reducers/index.js","helpers/store.js","components/Todos/AddTodoForm/index.js","components/Todos/TodoItem/index.js","components/Todos/TodoList/index.js","actions/todo.js","containers/todos/index.js","routes/index.js","containers/root/index.js","containers/app/index.js","index.js"],"names":["Boolean","window","location","hostname","match","todoConstants","initialState","todos","combineReducers","todo","state","arguments","length","undefined","action","type","Object","assign","concat","payload","map","id","objectSpread","completed","filter","persistConfig","key","storage","stateReconciler","autoMergeLevel2","pReducer","persistReducer","rootReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","Form","create","name","_ref","form","onFormSubmit","getFieldDecorator","react_default","a","createElement","es_form","onSubmit","e","preventDefault","validateFields","err","resetFields","handleSubmit","layout","className","row","gutter","col","xs","sm","md","lg","xl","Item","rules","required","message","input","prefix","icon","placeholder","spellCheck","es_button","htmlType","block","TodoItem","onTodoRemoval","onTodoToggle","list","actions","tooltip","title","onClick","es_checkbox","defaultChecked","onChange","tag","color","TodoList","locale","emptyText","dataSource","renderItem","Todos_TodoItem","todoActions","addTodo","Math","round","random","pow","toString","dispatch","toast","success","removeTodo","error","removeTodoSuccess","toggleTodo","info","toggleTodoSuccess","connect","bindActionCreators","justify","align","span","Todos_AddTodoForm","card","Todos_TodoList","routes","Switch","Route","path","exact","component","TodosContainer","Root","children","lib","position","autoClose","hideProgressBar","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","App","storePersistor","react_redux_es","integration_react","loading","root","BrowserRouter","src_routes","target","document","getElementById","render","app","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.809b9cf3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const todoConstants = {\r\n  ADD_TODO_SUCCESS: \"ADD_TODO_SUCCESS\",\r\n  TOGGLE_TODO_SUCCESS: \"TOGGLE_TODO_SUCCESS\",\r\n  REMOVE_TODO_SUCCESS: \"REMOVE_TODO_SUCCESS\"\r\n};\r\n","import { todoConstants } from \"../constants\";\r\n\r\nconst initialState = {\r\n  todos: []\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case todoConstants.ADD_TODO_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        todos: state.todos.concat(action.payload)\r\n      });\r\n    case todoConstants.TOGGLE_TODO_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        todos: state.todos.map(todo =>\r\n          todo.id === action.payload\r\n            ? { ...todo, completed: !todo.completed }\r\n            : todo\r\n        )\r\n      });\r\n    case todoConstants.REMOVE_TODO_SUCCESS:\r\n      return {\r\n        todos: state.todos.filter(todo => todo.id !== action.payload)\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport todo from \"./todo.reducer\";\r\n\r\nexport default combineReducers({\r\n  todo\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\r\n\r\n// importing root application reducer\r\nimport rootReducer from \"../reducers\";\r\n\r\n// Redux Persis Config\r\nconst persistConfig = {\r\n  key: \"application\",\r\n  storage: storage,\r\n  stateReconciler: autoMergeLevel2\r\n};\r\n\r\n// Persisting our reducer\r\nconst pReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n// creating our store with the persistant reducer\r\nexport const store = createStore(pReducer, applyMiddleware(thunk));\r\n\r\n// persisting our store to the next time that page reloads\r\nexport const persistor = persistStore(store);\r\n","import React from \"react\";\r\nimport { Form, Icon, Row, Col, Button, Input } from \"antd\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst AddTodoForm = ({ form, onFormSubmit }) => {\r\n  const { getFieldDecorator } = form;\r\n\r\n  // form submit handler\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    form.validateFields((err, todo) => {\r\n      if (!err) {\r\n        // resetting form fields\r\n        form.resetFields();\r\n\r\n        // submitting our form\r\n        onFormSubmit(todo.name);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={e => handleSubmit(e)}\r\n      layout=\"horizontal\"\r\n      className=\"todo-form\"\r\n    >\r\n      <Row gutter={20}>\r\n        <Col xs={24} sm={24} md={17} lg={19} xl={20}>\r\n          <Form.Item>\r\n            {getFieldDecorator(\"name\", {\r\n              rules: [\r\n                {\r\n                  required: true,\r\n                  message: \"Please, type in the todo name.\"\r\n                }\r\n              ]\r\n            })(\r\n              <Input\r\n                prefix={<Icon type=\"tags\" className=\"icon\" />}\r\n                placeholder=\"What needs to be done?\"\r\n                spellCheck={false}\r\n              />\r\n            )}\r\n          </Form.Item>\r\n        </Col>\r\n        <Col xs={24} sm={24} md={7} lg={5} xl={4}>\r\n          <Button type=\"primary\" htmlType=\"submit\" block>\r\n            <Icon type=\"plus-circle\" />\r\n            Add\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default Form.create({ name: \"AddTodoForm\" })(AddTodoForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Checkbox, Tooltip, Tag, Icon, List, Button } from \"antd\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst TodoItem = ({ todo, onTodoRemoval, onTodoToggle }) => {\r\n  return (\r\n    <List.Item\r\n      actions={[\r\n        <Tooltip title=\"Remove Todo\">\r\n          <Button type=\"danger\" onClick={() => onTodoRemoval(todo.id)}>\r\n            <Icon type=\"delete\" />\r\n          </Button>\r\n        </Tooltip>\r\n      ]}\r\n      className=\"list-item\"\r\n    >\r\n      <div className=\"todo-item\">\r\n        <Tooltip\r\n          title={todo.completed ? \"Mark as uncompleted\" : \"Mark as completed\"}\r\n        >\r\n          <Checkbox\r\n            defaultChecked={todo.completed}\r\n            onChange={() => onTodoToggle(todo.id)}\r\n          />\r\n        </Tooltip>\r\n\r\n        <Tag color={todo.completed ? \"green\" : \"volcano\"} className=\"todo-tag\">\r\n          {todo.completed ? <Icon type=\"check\" /> : \"-\"}\r\n        </Tag>\r\n\r\n        <div className=\"todo-name\">\r\n          {todo.completed ? <del>{todo.name}</del> : todo.name}\r\n        </div>\r\n      </div>\r\n    </List.Item>\r\n  );\r\n};\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  onTodoRemoval: PropTypes.func.isRequired,\r\n  onTodoToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { List } from \"antd\";\r\n\r\nimport TodoItem from \"../TodoItem\";\r\n\r\nconst TodoList = ({ todos, onTodoRemoval, onTodoToggle }) => (\r\n  <List\r\n    locale={{\r\n      emptyText: \"There's nothing to do :(\"\r\n    }}\r\n    dataSource={todos}\r\n    renderItem={todo => (\r\n      <TodoItem\r\n        todo={todo}\r\n        onTodoToggle={onTodoToggle}\r\n        onTodoRemoval={onTodoRemoval}\r\n      />\r\n    )}\r\n  />\r\n);\r\n\r\nTodoList.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  onTodoToggle: PropTypes.func.isRequired,\r\n  onTodoRemoval: PropTypes.func.isRequired\r\n};\r\n\r\nexport default TodoList;\r\n","import { todoConstants } from \"../constants\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst addTodoSuccess = todo => dispatch => {\r\n  dispatch({\r\n    type: todoConstants.ADD_TODO_SUCCESS,\r\n    payload: todo\r\n  });\r\n\r\n  toast.success(\"Todo added!\");\r\n};\r\n\r\nconst toggleTodoSuccess = id => dispatch => {\r\n  dispatch({\r\n    type: todoConstants.TOGGLE_TODO_SUCCESS,\r\n    payload: id\r\n  });\r\n\r\n  toast.info(\"Todo state updated!\");\r\n};\r\n\r\nconst removeTodoSuccess = id => dispatch => {\r\n  dispatch({\r\n    type: todoConstants.REMOVE_TODO_SUCCESS,\r\n    payload: id\r\n  });\r\n  toast.error(\"Todo removed!\");\r\n};\r\n\r\nconst addTodo = name =>\r\n  addTodoSuccess({\r\n    id: Math.round(Math.random() * 36 ** 12).toString(36),\r\n    name: name,\r\n    completed: false\r\n  });\r\n\r\nconst toggleTodo = id => toggleTodoSuccess(id);\r\n\r\nconst removeTodo = id => removeTodoSuccess(id);\r\n\r\nexport const todoActions = {\r\n  addTodo,\r\n  removeTodo,\r\n  toggleTodo\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Row, Col, Card } from \"antd\";\r\n\r\n// importing todo components\r\nimport AddTodoForm from \"../../components/Todos/AddTodoForm\";\r\nimport TodoList from \"../../components/Todos/TodoList\";\r\n\r\n// importing our todo's action's\r\nimport { todoActions } from \"../../actions\";\r\n\r\nconst TodosContainer = ({ todos, addTodo, removeTodo, toggleTodo }) => {\r\n  // form submit handler to add a todo\r\n  const handleformSubmit = todo => addTodo(todo);\r\n\r\n  // Todo removal handler\r\n  const handleTodoRemoval = todo => removeTodo(todo);\r\n\r\n  // Todo toggle handler\r\n  const handleTodoToggle = todo => toggleTodo(todo);\r\n\r\n  return (\r\n    <Row type=\"flex\" justify=\"center\" align=\"middle\">\r\n      <Col\r\n        xs={{ span: 23 }}\r\n        sm={{ span: 23 }}\r\n        md={{ span: 21 }}\r\n        lg={{ span: 20 }}\r\n        xl={{ span: 18 }}\r\n      >\r\n        <AddTodoForm onFormSubmit={handleformSubmit} />\r\n        <Card title=\"Todo List\">\r\n          <TodoList\r\n            todos={todos}\r\n            onTodoToggle={handleTodoToggle}\r\n            onTodoRemoval={handleTodoRemoval}\r\n          />\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nTodosContainer.propTypes = {\r\n  todos: PropTypes.array.isRequired,\r\n  addTodo: PropTypes.func.isRequired,\r\n  removeTodo: PropTypes.func.isRequired,\r\n  toggleTodo: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state.todo.todos\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n  bindActionCreators(\r\n    {\r\n      addTodo: todoActions.addTodo,\r\n      removeTodo: todoActions.removeTodo,\r\n      toggleTodo: todoActions.toggleTodo\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(TodosContainer);\r\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\n\r\n// importing containers\r\nimport TodosContainer from \"../containers/todos\";\r\n\r\nconst routes = () => (\r\n  <Switch>\r\n    <Route path=\"/\" exact={true} component={TodosContainer} />\r\n  </Switch>\r\n);\r\n\r\nexport default routes;\r\n","import React from \"react\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nconst Root = ({ children }) => (\r\n  <div>\r\n    {children}\r\n    <ToastContainer\r\n      position=\"bottom-left\"\r\n      autoClose={2000}\r\n      hideProgressBar={false}\r\n      closeOnClick\r\n      rtl={false}\r\n      pauseOnVisibilityChange\r\n      draggable\r\n      pauseOnHover={false}\r\n    />\r\n    ;\r\n  </div>\r\n);\r\n\r\nexport default Root;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport Routes from \"../../routes\";\r\n\r\nimport RootContainer from \"../root\";\r\n\r\nconst App = ({ store, storePersistor }) => {\r\n  return (\r\n    <Provider store={store}>\r\n      <PersistGate loading={<div>Loading...</div>} persistor={storePersistor}>\r\n        <RootContainer>\r\n          <BrowserRouter>\r\n            <Routes />\r\n          </BrowserRouter>\r\n        </RootContainer>\r\n      </PersistGate>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nApp.propTypes = {\r\n  store: PropTypes.object.isRequired,\r\n  storePersistor: PropTypes.object.isRequired\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// importing application global store\r\nimport { store, persistor } from \"./helpers\";\r\n\r\n// importing defalt ant design styles\r\nimport \"antd/dist/antd.css\";\r\n\r\n// importing react toastify styles\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// importing global Application styles\r\nimport \"./global.scss\";\r\n\r\n// importing root application container\r\nimport App from \"./containers/app\";\r\n\r\n// root node to render our application\r\nconst target = document.getElementById(\"root\");\r\n\r\nrender(<App store={store} storePersistor={persistor} />, target);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}