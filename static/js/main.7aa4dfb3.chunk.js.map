{"version":3,"sources":["serviceWorker.js","constants/todo.constants.js","reducers/todo.reducer.js","reducers/index.js","helpers/store.js","components/Todos/AddTodoForm/index.js","components/Todos/TodoItem/index.js","components/Todos/TodoList/index.js","actions/todo.js","containers/todos/index.js","routes/index.js","containers/root/index.js","containers/app/index.js","index.js"],"names":["Boolean","window","location","hostname","match","todoConstants","initialState","todos","combineReducers","todo","state","action","type","Object","assign","concat","payload","map","id","completed","filter","reduxPersistConfig","key","storage","stateReconciler","autoMergeLevel2","pReducer","persistReducer","rootReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","Form","create","name","form","onFormSubmit","getFieldDecorator","onSubmit","e","preventDefault","validateFields","err","resetFields","handleSubmit","layout","className","gutter","xs","sm","md","lg","xl","Item","rules","required","message","prefix","placeholder","spellCheck","htmlType","block","TodoItem","onTodoRemoval","onTodoToggle","actions","title","onClick","defaultChecked","onChange","color","TodoList","locale","emptyText","dataSource","renderItem","pagination","todoActions","addTodo","Math","round","random","toString","dispatch","toast","success","removeTodo","error","removeTodoSuccess","toggleTodo","info","toggleTodoSuccess","connect","bindActionCreators","justify","align","span","routes","path","exact","component","TodosContainer","Root","children","position","autoClose","hideProgressBar","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","App","storePersistor","loading","target","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7aa4dfb3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const todoConstants = {\n  ADD_TODO_SUCCESS: \"ADD_TODO_SUCCESS\",\n  TOGGLE_TODO_SUCCESS: \"TOGGLE_TODO_SUCCESS\",\n  REMOVE_TODO_SUCCESS: \"REMOVE_TODO_SUCCESS\"\n};\n","import { todoConstants } from \"../constants\";\n\nconst initialState = {\n  todos: []\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case todoConstants.ADD_TODO_SUCCESS:\n      return Object.assign({}, state, {\n        todos: state.todos.concat(action.payload)\n      });\n    case todoConstants.TOGGLE_TODO_SUCCESS:\n      return Object.assign({}, state, {\n        todos: state.todos.map(todo =>\n          todo.id === action.payload\n            ? { ...todo, completed: !todo.completed }\n            : todo\n        )\n      });\n    case todoConstants.REMOVE_TODO_SUCCESS:\n      return {\n        todos: state.todos.filter(todo => todo.id !== action.payload)\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport todo from \"./todo.reducer\";\n\nexport default combineReducers({\n  todo\n});\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport autoMergeLevel2 from \"redux-persist/lib/stateReconciler/autoMergeLevel2\";\n\nimport rootReducer from \"../reducers\";\n\nconst reduxPersistConfig = {\n  key: \"application\",\n  storage: storage,\n  stateReconciler: autoMergeLevel2\n};\n\nconst pReducer = persistReducer(reduxPersistConfig, rootReducer);\n\nexport const store = createStore(pReducer, applyMiddleware(thunk));\n\nexport const persistor = persistStore(store);\n","import React from \"react\";\nimport { Form, Icon, Row, Col, Button, Input } from \"antd\";\n\nimport \"./styles.scss\";\n\nconst AddTodoForm = ({ form, onFormSubmit }) => {\n  const { getFieldDecorator } = form;\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    form.validateFields((err, todo) => {\n      if (!err) {\n        form.resetFields();\n\n        onFormSubmit(todo.name);\n      }\n    });\n  };\n\n  return (\n    <Form\n      onSubmit={e => handleSubmit(e)}\n      layout=\"horizontal\"\n      className=\"todo-form\"\n    >\n      <Row gutter={20}>\n        <Col xs={24} sm={24} md={17} lg={19} xl={20}>\n          <Form.Item>\n            {getFieldDecorator(\"name\", {\n              rules: [\n                {\n                  required: true,\n                  message: \"Please, type in the todo name.\"\n                }\n              ]\n            })(\n              <Input\n                prefix={<Icon type=\"tags\" className=\"icon\" />}\n                placeholder=\"What needs to be done?\"\n                spellCheck={false}\n              />\n            )}\n          </Form.Item>\n        </Col>\n        <Col xs={24} sm={24} md={7} lg={5} xl={4}>\n          <Button type=\"primary\" htmlType=\"submit\" block>\n            <Icon type=\"plus-circle\" />\n            Add\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n};\n\nexport default Form.create({ name: \"AddTodoForm\" })(AddTodoForm);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Checkbox, Tooltip, Tag, Icon, List, Button } from \"antd\";\n\nimport \"./styles.scss\";\n\nconst TodoItem = ({ todo, onTodoRemoval, onTodoToggle }) => {\n  return (\n    <List.Item\n      actions={[\n        <Tooltip title=\"Remove Todo\">\n          <Button type=\"danger\" onClick={() => onTodoRemoval(todo.id)}>\n            <Icon type=\"delete\" />\n          </Button>\n        </Tooltip>\n      ]}\n      className=\"list-item\"\n      key={todo.id}\n    >\n      <div className=\"todo-item\">\n        <Tooltip\n          title={todo.completed ? \"Mark as uncompleted\" : \"Mark as completed\"}\n        >\n          <Checkbox\n            defaultChecked={todo.completed}\n            onChange={() => onTodoToggle(todo.id)}\n          />\n        </Tooltip>\n\n        <Tag color={todo.completed ? \"green\" : \"volcano\"} className=\"todo-tag\">\n          {todo.completed ? <Icon type=\"check\" /> : \"-\"}\n        </Tag>\n\n        <div className=\"todo-name\">\n          {todo.completed ? <del>{todo.name}</del> : todo.name}\n        </div>\n      </div>\n    </List.Item>\n  );\n};\n\nTodoItem.propTypes = {\n  todo: PropTypes.object.isRequired,\n  onTodoRemoval: PropTypes.func.isRequired,\n  onTodoToggle: PropTypes.func.isRequired\n};\n\nexport default TodoItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { List } from \"antd\";\n\nimport TodoItem from \"../TodoItem\";\n\nconst TodoList = ({ todos, onTodoRemoval, onTodoToggle }) => (\n  <List\n    locale={{\n      emptyText: \"There's nothing to do :(\"\n    }}\n    dataSource={todos}\n    renderItem={todo => (\n      <TodoItem\n        todo={todo}\n        onTodoToggle={onTodoToggle}\n        onTodoRemoval={onTodoRemoval}\n      />\n    )}\n    pagination={10}\n  />\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.array.isRequired,\n  onTodoToggle: PropTypes.func.isRequired,\n  onTodoRemoval: PropTypes.func.isRequired\n};\n\nexport default TodoList;\n","import { todoConstants } from \"../constants\";\nimport { toast } from \"react-toastify\";\n\nconst addTodoSuccess = todo => dispatch => {\n  dispatch({\n    type: todoConstants.ADD_TODO_SUCCESS,\n    payload: todo\n  });\n\n  toast.success(\"Todo added!\");\n};\n\nconst toggleTodoSuccess = id => dispatch => {\n  dispatch({\n    type: todoConstants.TOGGLE_TODO_SUCCESS,\n    payload: id\n  });\n\n  toast.info(\"Todo state updated!\");\n};\n\nconst removeTodoSuccess = id => dispatch => {\n  dispatch({\n    type: todoConstants.REMOVE_TODO_SUCCESS,\n    payload: id\n  });\n  toast.error(\"Todo removed!\");\n};\n\nconst addTodo = name =>\n  addTodoSuccess({\n    id: Math.round(Math.random() * 36 ** 12).toString(36),\n    name: name,\n    completed: false\n  });\n\nconst toggleTodo = id => toggleTodoSuccess(id);\n\nconst removeTodo = id => removeTodoSuccess(id);\n\nexport const todoActions = {\n  addTodo,\n  removeTodo,\n  toggleTodo\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Row, Col, Card } from \"antd\";\n\nimport AddTodoForm from \"../../components/Todos/AddTodoForm\";\nimport TodoList from \"../../components/Todos/TodoList\";\n\nimport { todoActions } from \"../../actions\";\n\nconst TodosContainer = ({ todos, addTodo, removeTodo, toggleTodo }) => {\n  const handleformSubmit = todo => addTodo(todo);\n\n  const handleTodoRemoval = todo => removeTodo(todo);\n\n  const handleTodoToggle = todo => toggleTodo(todo);\n\n  return (\n    <Row type=\"flex\" justify=\"center\" align=\"middle\">\n      <Col\n        xs={{ span: 23 }}\n        sm={{ span: 23 }}\n        md={{ span: 21 }}\n        lg={{ span: 20 }}\n        xl={{ span: 18 }}\n      >\n        <AddTodoForm onFormSubmit={handleformSubmit} />\n\n        <Card title=\"Todo List\">\n          <TodoList\n            todos={todos}\n            onTodoToggle={handleTodoToggle}\n            onTodoRemoval={handleTodoRemoval}\n          />\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nTodosContainer.propTypes = {\n  todos: PropTypes.array.isRequired,\n  addTodo: PropTypes.func.isRequired,\n  removeTodo: PropTypes.func.isRequired,\n  toggleTodo: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todo.todos\n  };\n};\n\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      addTodo: todoActions.addTodo,\n      removeTodo: todoActions.removeTodo,\n      toggleTodo: todoActions.toggleTodo\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodosContainer);\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport TodosContainer from \"../containers/todos\";\n\nconst routes = () => (\n  <Switch>\n    <Route path=\"/\" exact={true} component={TodosContainer} />\n  </Switch>\n);\n\nexport default routes;\n","import React from \"react\";\nimport { ToastContainer } from \"react-toastify\";\n\nconst Root = ({ children }) => (\n  <>\n    {children}\n    <ToastContainer\n      position=\"bottom-left\"\n      autoClose={2000}\n      hideProgressBar={false}\n      closeOnClick\n      rtl={false}\n      pauseOnVisibilityChange\n      draggable\n      pauseOnHover={false}\n    />\n  </>\n);\n\nexport default Root;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { HashRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport Routes from \"../../routes\";\n\nimport RootContainer from \"../root\";\n\nconst App = ({ store, storePersistor }) => {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={<div>Loading...</div>} persistor={storePersistor}>\n        <RootContainer>\n          <HashRouter>\n            <Routes />\n          </HashRouter>\n        </RootContainer>\n      </PersistGate>\n    </Provider>\n  );\n};\n\nApp.propTypes = {\n  store: PropTypes.object.isRequired,\n  storePersistor: PropTypes.object.isRequired\n};\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { store, persistor } from \"./helpers\";\n\nimport \"antd/dist/antd.css\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./global.scss\";\n\nimport App from \"./containers/app\";\n\nconst target = document.getElementById(\"root\");\n\nrender(<App store={store} storePersistor={persistor} />, target);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}